function PropertyModel(details){function getValue(propName){return isUndefinedOrNull(propName)?null:details[propName]}function isUndefinedOrNull(propName){return"undefined"!=typeof details&&null!==details&&"undefined"!=typeof details[propName]?!1:!0}this.name=getValue("propertyName"),this.text=getValue("propertyValue"),this.schemaId=getValue("schemaId"),this.schemaName=getValue("schemaName"),this.tableId=getValue("tableId"),this.tableName=getValue("tableName"),this.columnId=getValue("columnId"),this.columnName=getValue("columnName")}function PropertySuggestions(){function get(type){switch((type||"").toLowerCase()){case"table":return getTable();case"column":return getColumn();default:return getSuggestions(commonSuggestions)}}function getTable(){var suggestions=commonSuggestions.concat(tableSuggestions);return getSuggestions(suggestions)}function getColumn(){var suggestions=commonSuggestions.concat(columnSuggestions);return getSuggestions(suggestions)}function getSuggestions(suggestions){return suggestions.sort(),suggestions}var commonSuggestions=["Description","Dependencies"],tableSuggestions=["Module"],columnSuggestions=["Aliases"];this.get=get}var ScrollTop=function(me){function onScroll(ev){var scrollPos=$(window).scrollTop(),elem=$(".scroll-top");offset>scrollPos?elem.removeClass("scroll-top-visible, scroll-top-faded").hide():scrollPos>offsetOpacity?elem.removeClass("scroll-top-visible").addClass("scroll-top-faded").show():elem.removeClass("scroll-top-faded").addClass("scroll-top-visbile").show()}function onScrollTopClicked(ev){var anchor=$(this);animateScrollTop(anchor),ev.preventDefault()}function animateScrollTop(anchor){$("html, body").stop().animate({scrollTop:$(anchor.attr("href")).offset().top-30},scrollDuration)}var offset=60,offsetOpacity=250,scrollDuration=700;$(window).scroll(onScroll),$(".scroll-top").on("click",onScrollTopClicked)}(ScrollTop),SectionLoader=function(me){function onMenuItemClick(ev){var anchor=$(this);loadPartial(anchor),animateScroll(anchor),ev.preventDefault()}function animateScroll(anchor){$("html, body").stop().animate({scrollTop:$(anchor.attr("href")).offset().top-30},700)}function loadPartial(anchor){var section=$(anchor.attr("href"));if(section.hasClass("lazy-load")&&section.find(".section").length<=0){var url=anchor.data("url");$.get(url,function(data){if(section.append(data),contentContainers.length>0)for(var i=0,len=contentContainers.length;len>i;i++){var item=contentContainers[i];section.attr("id").toLowerCase()===item.name.toLowerCase()&&$(item.selector).append(item.data)}})}}$(".page-scroll a").on("click",onMenuItemClick);var contentContainers=[],markdownContainer=$("#markdownLocation");$.get(markdownContainer.data("url"),function(data){contentContainers.push({name:"about",selector:"#markdownDestination",data:data})})}(SectionLoader);!function(angular){"use strict";angular.module("sqlDocumenterApp",["ui.bootstrap","ngTable"])}(window.angular),function(angular){"use strict";var app=angular.module("sqlDocumenterApp");app.value("baseUrl",""),app.value("nancyUrl","nancy/")}(window.angular),function(angular,_){"use strict";function controller(ngScope,NgTableParams,documenterService,propertyService,modelBuilder){function getTableText(){return angular.isDefined(vm.table)&&vm.table&&angular.isDefined(vm.table.tableId)?vm.table.schemaName+"."+vm.table.tableName:void 0}function isTableValid(){return angular.isDefined(vm.table)&&vm.table?vm.table.tableId:!1}function editTableProperty(row){angular.isDefined(row)&&null!==row&&(vm.selectedTableProperty={objectId:row.tableId,name:row.name,description:row.text})}function editColumnProperty(row){if(angular.isDefined(row)&&null!==row){var column=_.find(vm.columns,function(c){return c.columnId===row.columnId});angular.isDefined(column)&&(vm.column=column),vm.selectedColumnProperty={objectId:row.columnId,name:row.name,description:row.text}}}function removeTableProperty(row){angular.isDefined(row)&&null!==row&&propertyService.deleteProperty(row,vm.connection).then(function(){getProperties()})}function removeColumnProperty(row){angular.isDefined(row)&&null!==row&&propertyService.deleteProperty(row,vm.connection).then(function(){getProperties()})}function getColumns(){vm.table&&vm.connection&&documenterService.getColumns(vm.table.tableId,vm.connection).then(function(data){vm.columns=data;var all={columnName:"All"};vm.dropdownColumns=[all].concat(vm.columns),vm.column=all})}function getProperties(){vm.table&&vm.connection&&propertyService.getProperties(vm.table.tableId,vm.connection).then(function(data){vm.properties=data,vm.tableParams.settings({dataset:getTableProperties()}),vm.columnParams.settings({dataset:getColumnProperties()})})}function getTableProperties(){return angular.isUndefined(vm.properties)||0===vm.properties.length?[]:_.filter(vm.properties,function(p){return null===p.columnId||p.columnId<=0})}function getColumnProperties(){return angular.isUndefined(vm.properties)||0===vm.properties.length?[]:_.filter(vm.properties,function(p){return null!==p.columnId&&p.columnId>0})}function selectedDatabaseChanged(val){angular.isDefined(val)?vm.connection=val:(vm.properties=[],vm.columns=[],vm.dropdownColumns=[],vm.column=null,vm.page.table=null,vm.page.connection=null),vm.savedTableProperty=null,vm.savedColumnProperty=null}function selectedTableChanged(val){angular.isDefined(val)&&val&&angular.isDefined(val.tableId)?(vm.table=val,getColumns(),getProperties()):(vm.column=null,vm.columns=[],vm.dropdownColumns=[],vm.properties=[]),vm.savedTableProperty=null,vm.savedColumnProperty=null}function savedTableTrigger(val){if(angular.isDefined(val)&&val&&angular.isDefined(val.objectId)){var model=createBaseModel(val),preExisting=_.find(vm.properties,function(p){return p.tableId===vm.table.tableId&&p.name===model.name&&(null===p.columnId||p.columnId<=0)});saveModel(model,preExisting)}}function savedColumnTrigger(val){if(angular.isDefined(val)&&val&&angular.isDefined(val.objectId)&&angular.isDefined(vm.column)){var model=createBaseModel(val),columnId=vm.column.columnId;model.columnId=columnId,model.columnName=vm.column.columnName;var preExisting=_.find(vm.properties,function(p){return p.columnId===columnId&&p.name===model.name});saveModel(model,preExisting)}}function saveModel(model,isPreExisting){"undefined"==typeof isPreExisting?propertyService.addProperty(model,vm.connection).then(function(){getProperties()}):propertyService.updateProperty(model,vm.connection).then(function(){getProperties()})}function createBaseModel(val){return angular.isDefined(vm.table)?modelBuilder.create({propertyName:val.propertyName,propertyValue:val.propertyValue,schemaId:vm.table.schemaId,schemaName:vm.table.schemaName,tableId:vm.table.tableId,tableName:vm.table.tableName}):void 0}var vm=this;vm.table=null,vm.connection=null,vm.columns=[],vm.column=null,vm.dropdownColumns=[],vm.properties=[],vm.savedTableProperty=null,vm.savedColumnProperty=null,vm.tableParams=new NgTableParams({count:10}),vm.columnParams=new NgTableParams({count:10}),vm.selectedTableProperty=null,vm.selectedColumnProperty=null,vm.getTableText=getTableText,vm.isTableValid=isTableValid,vm.editTableProperty=editTableProperty,vm.editColumnProperty=editColumnProperty,vm.removeTableProperty=removeTableProperty,vm.removeColumnProperty=removeColumnProperty,ngScope.$watch(function(){return vm.connection},selectedDatabaseChanged),ngScope.$watch(function(){return vm.table},selectedTableChanged),ngScope.$watch(function(){return vm.savedTableProperty},savedTableTrigger),ngScope.$watch(function(){return vm.savedColumnProperty},savedColumnTrigger)}controller.$inject=["$scope","NgTableParams","documenterService","extendedPropertyService","propertyModelBuilderService"],angular.module("sqlDocumenterApp").controller("documenterController",controller)}(window.angular,_),function(angular){"use strict";function documenterPageController(ngScope,ngTimeout,documenterService,nancyApiService,common){function init(){ngTimeout(function(){common.appRoot=vm.appRootPath,nancyApiService.setNancyApiPath(vm.nancyPath),getDatabases()},1)}function getDatabases(){documenterService.getDatabases().then(function(data){vm.databases=data})}function getTables(){angular.isDefined(vm.connection)&&vm.connection&&documenterService.getTables(vm.connection).then(function(data){vm.tables=data,vm.table=""})}var vm=this;vm.databases=null,vm.connection=null,vm.tables=null,vm.table=null,vm.allowNancy=!1,vm.useNancy=!1,ngScope.$watch(function(){return vm.connection},function(val){val?(vm.allowNancy=val.allowNancy,vm.useNancy=!1,nancyApiService.useNancy(!1),getTables()):(vm.tables=null,vm.table=null,vm.allowNancy=!1,vm.useNancy=!1)}),ngScope.$watch(function(){return vm.useNancy},function(val){nancyApiService.useNancy(val),getTables(),val&&common.notifier.info("You're now using Nancy!","Aren't You Fancy :-)")}),init()}documenterPageController.$inject=["$scope","$timeout","documenterService","nancyApiService","commonService"],angular.module("sqlDocumenterApp").controller("documenterPageController",documenterPageController)}(window.angular),function(angular){"use strict";function dropdownController(){function getText(item){return angular.isDefined(item)&&item?item[vm.textPath]||item.toString():void 0}function getSelectedText(){var selectedItemText=getText(vm.selected);return selectedItemText||vm.text}function select($e,data){vm.selected=data,vm.text=vm.selected[vm.textPath]||data.toString()}function isDisabled(){return vm.disabled?!0:null===vm.items?!0:0===vm.items.length?!0:!1}function isOpen(){return vm.open}var vm=this,defaultText=vm.textCaption||"-- Select an Item --";vm.disabled=vm.disabled||!1,vm.open=!1,vm.cssClass=vm.cssClass||"",vm.text=vm.text||defaultText,vm.isOpen=isOpen,vm.isDisabled=isDisabled,vm.select=select,vm.getText=getText,vm.getSelectedText=getSelectedText}dropdownController.$inject=[],angular.module("sqlDocumenterApp").controller("dropdownController",dropdownController)}(window.angular),function(angular){"use strict";function propertyFormController(ngScope,ngTimeout,suggestionService){function init(){vm.suggestions=suggestionService.get(vm.type)}function submit(){vm.saved={objectId:vm.objectId,propertyName:vm.name,propertyValue:vm.description}}function clear(){vm.name="",vm.description=null,vm.property=null}function isFormDisabeld(){return angular.isUndefined(vm.objectId)||null===vm.objectId||""===vm.objectId}function propertyChanged(val){angular.isDefined(val)&&val&&(val=JSON.parse(val),vm.name=val.name,vm.description=val.description,vm.objectId=val.objectId)}var vm=this;vm.name="",vm.description=null,vm.suggestions=[],vm.submit=submit,vm.clear=clear,vm.isFormDisabeld=isFormDisabeld,ngScope.$watch(function(){return vm.property},propertyChanged),init()}propertyFormController.$inject=["$scope","$timeout","propertySuggestionsService"],angular.module("sqlDocumenterApp").controller("propertyFormController",propertyFormController)}(window.angular),function(angular){"use strict";function documenter(){var directive={restrict:"E",replace:!0,scope:{table:"=",connection:"="},templateUrl:"/Scripts/app/views/documenter.directive.html",controller:"documenterController",controllerAs:"documenter",bindToController:!0,link:angular.noop};return directive}angular.module("sqlDocumenterApp").directive("documenter",documenter)}(window.angular),function(angular){"use strict";function customDropdown(){var directive={restrict:"E",replace:!0,require:"?ngModel",scope:{items:"=",text:"=",textPath:"@?",textCaption:"@?",selected:"=",disabled:"=",cssClass:"@?"},templateUrl:"/Scripts/app/views/dropdown.directive.html",controller:"dropdownController",controllerAs:"drop",bindToController:!0,link:angular.noop};return directive}angular.module("sqlDocumenterApp").directive("customDropdown",customDropdown)}(window.angular),function(angular){"use strict";function propertyFormDirective(){var directive={restrict:"EA",replace:!1,scope:{objectId:"@",property:"@",type:"@",saved:"="},templateUrl:"/Scripts/app/views/propertyForm.directive.html",controller:"propertyFormController",controllerAs:"propertyForm",bindToController:!0};return directive}angular.module("sqlDocumenterApp").directive("propertyForm",propertyFormDirective)}(window.angular),function(angular){"use strict";function commonService(notify,log,baseUrl,nancyUrl){this.notifier=notify,this.logger=log,this.baseAppUrl=baseUrl,this.baseWebApiUrl="api/",this.baseNancyUrl=nancyUrl,this.appRoot=""}commonService.$inject=["notificationService","loggerService","baseUrl","nancyUrl"],angular.module("sqlDocumenterApp").service("commonService",commonService)}(window.angular),function(angular,_){"use strict";function documenterService(ngHttp,ngQ,ngTimeout,common,nancyApi){function getDatabases(){function ready(){return null!==webApiDbs&&null!==nancyDbs?!0:!1}function buildReturn(){function isNancyEnabled(connection){return _.find(nancyDbs,function(nDb){return nDb.name===connection.name})}var returnVal=[];if(0===webApiDbs.length&&0===nancyDbs.length)return returnVal;for(var i=0,len=webApiDbs.length;len>i;i++){var connection=webApiDbs[i];connection.allowNancy="undefined"!=typeof isNancyEnabled(connection),returnVal.push(connection)}return returnVal}var deferred=ngQ.defer(),webApiDbs=null,nancyDbs=null;return getWebApiDatabases().then(function(data){webApiDbs=data,ready()&&deferred.resolve(buildReturn())}),getNancyDatabases().then(function(data){nancyDbs=data,ready()&&deferred.resolve(buildReturn())}),deferred.promise}function getTables(connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"GET",url:buildUrl("tables")}).then(function(resp){return resp.data},function(err){return common.logger.log(err),common.notifier.error("Failed to find tables",getErrorHeader(err)),[]})}function getColumns(tableId,connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"GET",url:buildUrl("columns/"+tableId)}).then(function(resp){return resp.data},function(err){return common.logger.log(err),common.notifier.error("Failed to find columns for selected table",getErrorHeader(err)),[]})}function buildUrl(relative){return nancyApi.useNancy()?nancyApi.getNancyApiPath()+relative:apiPrefix+relative}function getErrorHeader(err){return err.status+" | "+err.statusText}function getWebApiDatabases(){return ngHttp({method:"GET",url:apiPrefix+"databases"}).then(function(resp){return resp.data},function(err){return common.logger.log(err),common.notifier.error("Failed to find databases setup for Web API",getErrorHeader(err)),[]})}function getNancyDatabases(){var host=nancyApi.getNancyApiPath();if(angular.isUndefined(host)||null===host||""===host.trim()){var deferred=ngQ.defer();return ngTimeout(function(){deferred.resolve([])},1),deferred.promise}return ngHttp({method:"GET",url:host+"databases"}).then(function(resp){return resp.data},function(err){return common.logger.log(err),common.notifier.error("Failed to find databases setup for Nancy",getErrorHeader(err)),[]})}var apiPrefix=common.appRoot+common.baseAppUrl+common.baseWebApiUrl+"documenter/",service={getDatabases:getDatabases,getTables:getTables,getColumns:getColumns};return service}documenterService.$inject=["$http","$q","$timeout","commonService","nancyApiService"],angular.module("sqlDocumenterApp").factory("documenterService",documenterService)}(window.angular,_),function(angular){"use strict";function extendedPropertyService(ngHttp,ngQ,common,nancyApi){function deleteProperty(propertyModel,connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"POST",url:buildUrl("delete"),data:propertyModel}).then(function(){common.notifier.success("The property has been deleted!","Deletion Successful")},function(err){common.logger.log(err);var msg=getErrorMsg(err,"Failed to delete property");common.notifier.error(msg,getErrorHeader(err))})}function addProperty(propertyModel,connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"POST",url:buildUrl("add"),data:propertyModel}).then(function(){common.notifier.success("The property has been added!","Save Successful")},function(err){common.logger.log(err);var msg=getErrorMsg(err,"Failed to add the property");common.notifier.error(msg,getErrorHeader(err))})}function updateProperty(propertyModel,connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"POST",url:buildUrl("update"),data:propertyModel}).then(function(){common.notifier.success("The property has been updated!","Save Successful")},function(err){common.logger.log(err);var msg=getErrorMsg(err,"Failed to update the property");common.notifier.error(msg,getErrorHeader(err))})}function getTableProperties(tableId,connection){return ngHttp.defaults.headers.common.connectionString=connection.connectionString,ngHttp({method:"GET",url:buildUrl("get/"+tableId)}).then(function(resp){return resp.data},function(err){common.logger.log(err);var msg=getErrorMsg(err,"Failed to get properties for the selected table");return common.notifier.error(msg,getErrorHeader(err)),[]})}function getErrorMsg(err,defaultMsg){return 400===err.status?err.data.Message||defaultMsg:defaultMsg}function getErrorHeader(err){return err.status+" | "+err.statusText}function buildUrl(relative){return nancyApi.useNancy()?nancyApi.getNancyApiPath()+"property/"+relative:apiPrefix+relative}var apiPrefix=common.appRoot+common.baseAppUrl+common.baseWebApiUrl+"property/",service={deleteProperty:deleteProperty,addProperty:addProperty,updateProperty:updateProperty,getProperties:getTableProperties};return service}extendedPropertyService.$inject=["$http","$q","commonService","nancyApiService"],angular.module("sqlDocumenterApp").factory("extendedPropertyService",extendedPropertyService)}(window.angular),function(angular){"use strict";function loggerService(){function log(data){}var service={log:log};return service}angular.module("sqlDocumenterApp").factory("loggerService",loggerService)}(window.angular),function(angular){"use strict";function nancyApiService(common){function useNancy(use){return angular.isUndefined(use)||null===use?nancyEnabled:void(nancyEnabled=use)}function getNancyApiPath(){return nancyApiPath}function setNancyApiPath(path){nancyApiPath=(path||"")+common.baseNancyUrl}var nancyEnabled=!1,nancyApiPath="";this.useNancy=useNancy,this.setNancyApiPath=setNancyApiPath,this.getNancyApiPath=getNancyApiPath}nancyApiService.$inject=["commonService"],angular.module("sqlDocumenterApp").service("nancyApiService",nancyApiService)}(window.angular),function(angular,toastr){"use strict";function notificationService(){function success(text,header){toastr.success(text,header||"Success")}function error(text,header){toastr.error(text,header||"Error")}function info(text,header){toastr.info(text,header||"Info")}toastr.options={closeButton:!0,positionClass:"toast-bottom-center",showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var service={success:success,error:error,info:info};return service}angular.module("sqlDocumenterApp").factory("notificationService",notificationService)}(window.angular,toastr),function(angular){"use strict";function propertyModelBuilderService(){function create(details){return angular.isUndefined(details)||null===details?null:new PropertyModel(details)}var service={create:create};return service}angular.module("sqlDocumenterApp").factory("propertyModelBuilderService",propertyModelBuilderService)}(window.angular),function(angular,_){"use strict";angular.module("sqlDocumenterApp").service("propertySuggestionsService",PropertySuggestions)}(window.angular,_);